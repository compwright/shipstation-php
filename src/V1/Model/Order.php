<?php

declare(strict_types=1);

namespace Compwright\ShipstationPhp\V1\Model;

use Compwright\ShipstationPhp\Common\Model\BaseModel;
use Compwright\ShipstationPhp\Common\Model\DateType;
use Compwright\ShipstationPhp\Common\Model\ListType;
use Compwright\ShipstationPhp\Common\Model\StringType;

class Order extends BaseModel
{
    public const STATUS_AWAITING_PAYMENT = 'awaiting_payment';
    public const STATUS_AWAITING_SHIPMENT = 'awaiting_shipment';
    public const STATUS_SHIPPED = 'shipped';
    public const STATUS_ON_HOLD = 'on_hold';
    public const STATUS_CANCELLED = 'cancelled';

    public const CONFIRMATION_NONE = 'none';
    public const CONFIRMATION_DELIVERY = 'delivery';
    public const CONFIRMATION_SIGNATURE = 'signature';
    public const CONFIRMATION_SIGNATURE_ADULT = 'adult_signature';
    public const CONFIRMATION_SIGNATURE_DIRECT = 'direct_signature';

    /**
     * @var int A unique ID assigned with the order by ShipStation API V1. This value will be returned in the response whenever you create a new order.
     * Notes about using this property:
     * - Do not include this property when creating a new order.
     * - Including the orderID property when updating the order will help prevent duplicate order records.
     * - When updating split orders, you must always include this property.
     */
    public int $orderId;

    /**
     * @var string A user-defined order number used to identify an order.
     */
    public string $orderNumber {
        set(string $orderNumber) {
            $this->orderNumber = StringType::castMaxLength(__PROPERTY__, $orderNumber, 50);
        }
    }

    /**
     * @var string A user-provided key that should be unique to each order.
     */
    public string $orderKey;

    /**
     * @var string The date the order was placed.
     */
    public $orderDate {
        set($value) {
            $this->orderDate = DateType::create($value)->format('Y-m-d\TH:i:s.u');
        }
    }

    /**
     * @var string The date the order was paid for.
     */
    public $paymentDate {
        set($value) {
            $this->paymentDate = DateType::create($value)->format('Y-m-d\TH:i:s.u');
        }
    }

    /**
     * @var string The date the order is to be shipped before or on.
     */
    public $shipByDate {
        set($value) {
            $this->shipByDate = DateType::create($value)->format('Y-m-d\TH:i:s.u');
        }
    }

    /**
     * @var string|self::STATUS_* The order's status.
     */
    public string $orderStatus {
        set(string $status) {
            $this->orderStatus = StringType::oneOf(
                __PROPERTY__,
                $status,
                self::STATUS_AWAITING_PAYMENT,
                self::STATUS_AWAITING_SHIPMENT,
                self::STATUS_SHIPPED,
                self::STATUS_ON_HOLD,
                self::STATUS_CANCELLED
            );
        }
    }

    /**
     * @var int Unique identifier for the customer. Generated by ShipStation the first time the customer record is created. Read-Only
     */
    public int $customerId;

    /**
     * @var string Identifier for the customer in the originating system. This is typically a username or email address.
     */
    public string $customerUsername;

    /**
     * @var string The customer's email address.
     */
    public string $customerEmail;

    /**
     * @var Address|array<string, mixed> The recipients billing address.
     */
    public $billTo {
        set($value) {
            $this->billTo = Address::create($value);
        }
    }

    /**
     * @var Address|array<string, mixed> The recipients shipping address.
     */
    public $shipTo {
        set($value) {
            $this->shipTo = Address::create($value);
        }
    }

    /**
     * @var array<OrderItem|array<string, mixed>> Array of purchased items.
     */
    public array $items {
        set(array $items) {
            $this->items = OrderItem::createList($items);
        }
    }

    /**
     * @var float The total amount paid for the Order.
     */
    public float $amountPaid;

    /**
     * @var float The total tax amount for the Order.
     */
    public float $taxAmount;

    /**
     * @var float Shipping amount paid by the customer, if any.
     */
    public float $shippingAmount;

    /**
     * @var string Notes left by the customer when placing the order.
     */
    public string $customerNotes;

    /**
     * @var string Private notes that are only visible to the seller.
     */
    public string $internalNotes;

    /**
     * @var bool Specifies whether or not this Order is a gift
     */
    public bool $gift;

    /**
     * @var string Gift message left by the customer when placing the order.
     */
    public string $giftMessage;

    /**
     * @var string Method of payment used by the customer.
     */
    public string $paymentMethod;

    /**
     * @var string Identifies the shipping service selected by the customer when placing this order.
     */
    public string $requestedShippingService;

    /**
     * @var string The code for the carrier that is to be used(or was used) when this order is shipped(was shipped).
     */
    public string $carrierCode;

    /**
     * @var string The code for the shipping service that is to be used(or was used) when this order is/was shipped.
     */
    public string $serviceCode;

    /**
     * @var string The code for the package type that is to be used(or was used) when this order is/was shipped
     */
    public string $packageCode;

    /**
     * @var string|self::CONFIRMATION_* The type of delivery confirmation that is to be used(or was used) when this order is/was shipped
     */
    public string $confirmation {
        set(string $confirmation) {
            $this->confirmation = StringType::oneOf(
                __PROPERTY__,
                $confirmation,
                self::CONFIRMATION_NONE,
                self::CONFIRMATION_DELIVERY,
                self::CONFIRMATION_SIGNATURE,
                self::CONFIRMATION_SIGNATURE_ADULT,
                self::CONFIRMATION_SIGNATURE_DIRECT
            );
        }
    }

    /**
     * @var string The date the order was shipped.
     */
    public $shipDate {
        set($value) {
            $this->shipDate = DateType::create($value)->format('Y-m-d');
        }
    }

    /**
     * @var string If placed on hold, this date is the expiration date for this order's hold status.
     * The order is moved back to awaiting_shipment on this date.
     */
    public $holdUntilDate {
        set($value) {
            $this->holdUntilDate = DateType::create($value)->format('Y-m-d');
        }
    }

    /**
     * @var Weight|array<string, mixed> Weight of the order.
     */
    public $weight {
        set($value) {
            $this->weight = Weight::create($value);
        }
    }

    /**
     * @var Dimensions|array<string, mixed> Dimensions of the order.
     */
    public $dimensions {
        set($value) {
            $this->dimensions = Dimensions::create($value);
        }
    }

    /**
     * @var InsuranceOptions|array<string, mixed> The shipping insurance information associated with this order.
     */
    public $insuranceOptions {
        set($value) {
            $this->insuranceOptions = InsuranceOptions::create($value);
        }
    }

    /**
     * @var InternationalOptions|array<string, mixed> Customs information that can be used to generate customs documents for international orders.
     */
    public $internationalOptions {
        set($value) {
            $this->internationalOptions = InternationalOptions::create($value);
        }
    }

    /**
     * @var string The default two-letter ISO Origin Country code for the Product.
     */
    public string $customsCountryCode;

    /**
     * @var AdvancedOptions|array<string, mixed> Various advanced options that may be available depending on the shipping carrier
     * that is used to ship the order.
     */
    public $advancedOptions {
        set($value) {
            $this->advancedOptions = AdvancedOptions::create($value);
        }
    }

    /**
     * @var int[] Array of tagIds. Each tagId identifies a tag that has been associated with this order.
     */
    public array $tagIds {
        /**
         * @param int[] $input
         */
        set(array $input) {
            $this->tagIds = ListType::allOfInt(__PROPERTY__, $input);
        }
    }
}
